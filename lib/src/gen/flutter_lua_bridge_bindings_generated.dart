// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/flutter_lua_bridge.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class FlutterLuaBridgeBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterLuaBridgeBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterLuaBridgeBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// RCS ident string
  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _lua_ident =
      _lookup<ffi.Pointer<ffi.Char>>('lua_ident');

  ffi.Pointer<ffi.Char> get lua_ident => _lua_ident.value;

  set lua_ident(ffi.Pointer<ffi.Char> value) => _lua_ident.value = value;

  /// state manipulation
  ffi.Pointer<lua_State> lua_newstate(lua_Alloc f, ffi.Pointer<ffi.Void> ud) {
    return _lua_newstate(f, ud);
  }

  late final _lua_newstatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<lua_State> Function(lua_Alloc, ffi.Pointer<ffi.Void>)
        >
      >('lua_newstate');
  late final _lua_newstate = _lua_newstatePtr
      .asFunction<
        ffi.Pointer<lua_State> Function(lua_Alloc, ffi.Pointer<ffi.Void>)
      >();

  void lua_close(ffi.Pointer<lua_State> L) {
    return _lua_close(L);
  }

  late final _lua_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
        'lua_close',
      );
  late final _lua_close = _lua_closePtr
      .asFunction<void Function(ffi.Pointer<lua_State>)>();

  ffi.Pointer<lua_State> lua_newthread(ffi.Pointer<lua_State> L) {
    return _lua_newthread(L);
  }

  late final _lua_newthreadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<lua_State> Function(ffi.Pointer<lua_State>)
        >
      >('lua_newthread');
  late final _lua_newthread = _lua_newthreadPtr
      .asFunction<ffi.Pointer<lua_State> Function(ffi.Pointer<lua_State>)>();

  int lua_closethread(ffi.Pointer<lua_State> L, ffi.Pointer<lua_State> from) {
    return _lua_closethread(L, from);
  }

  late final _lua_closethreadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>)
        >
      >('lua_closethread');
  late final _lua_closethread = _lua_closethreadPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>)
      >();

  int lua_resetthread(ffi.Pointer<lua_State> L) {
    return _lua_resetthread(L);
  }

  late final _lua_resetthreadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'lua_resetthread',
      );
  late final _lua_resetthread = _lua_resetthreadPtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  lua_CFunction lua_atpanic(ffi.Pointer<lua_State> L, lua_CFunction panicf) {
    return _lua_atpanic(L, panicf);
  }

  late final _lua_atpanicPtr =
      _lookup<
        ffi.NativeFunction<
          lua_CFunction Function(ffi.Pointer<lua_State>, lua_CFunction)
        >
      >('lua_atpanic');
  late final _lua_atpanic = _lua_atpanicPtr
      .asFunction<
        lua_CFunction Function(ffi.Pointer<lua_State>, lua_CFunction)
      >();

  double lua_version(ffi.Pointer<lua_State> L) {
    return _lua_version(L);
  }

  late final _lua_versionPtr =
      _lookup<ffi.NativeFunction<lua_Number Function(ffi.Pointer<lua_State>)>>(
        'lua_version',
      );
  late final _lua_version = _lua_versionPtr
      .asFunction<double Function(ffi.Pointer<lua_State>)>();

  /// basic stack manipulation
  int lua_absindex(ffi.Pointer<lua_State> L, int idx) {
    return _lua_absindex(L, idx);
  }

  late final _lua_absindexPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_absindex');
  late final _lua_absindex = _lua_absindexPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_gettop(ffi.Pointer<lua_State> L) {
    return _lua_gettop(L);
  }

  late final _lua_gettopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'lua_gettop',
      );
  late final _lua_gettop = _lua_gettopPtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  void lua_settop(ffi.Pointer<lua_State> L, int idx) {
    return _lua_settop(L, idx);
  }

  late final _lua_settopPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_settop');
  late final _lua_settop = _lua_settopPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_pushvalue(ffi.Pointer<lua_State> L, int idx) {
    return _lua_pushvalue(L, idx);
  }

  late final _lua_pushvaluePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_pushvalue');
  late final _lua_pushvalue = _lua_pushvaluePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_rotate(ffi.Pointer<lua_State> L, int idx, int n) {
    return _lua_rotate(L, idx, n);
  }

  late final _lua_rotatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int, ffi.Int)
        >
      >('lua_rotate');
  late final _lua_rotate = _lua_rotatePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  void lua_copy(ffi.Pointer<lua_State> L, int fromidx, int toidx) {
    return _lua_copy(L, fromidx, toidx);
  }

  late final _lua_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int, ffi.Int)
        >
      >('lua_copy');
  late final _lua_copy = _lua_copyPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_checkstack(ffi.Pointer<lua_State> L, int n) {
    return _lua_checkstack(L, n);
  }

  late final _lua_checkstackPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_checkstack');
  late final _lua_checkstack = _lua_checkstackPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  void lua_xmove(
    ffi.Pointer<lua_State> from,
    ffi.Pointer<lua_State> to,
    int n,
  ) {
    return _lua_xmove(from, to, n);
  }

  late final _lua_xmovePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<lua_State>,
            ffi.Int,
          )
        >
      >('lua_xmove');
  late final _lua_xmove = _lua_xmovePtr
      .asFunction<
        void Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>, int)
      >();

  /// access functions (stack -> C)
  int lua_isnumber(ffi.Pointer<lua_State> L, int idx) {
    return _lua_isnumber(L, idx);
  }

  late final _lua_isnumberPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_isnumber');
  late final _lua_isnumber = _lua_isnumberPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_isstring(ffi.Pointer<lua_State> L, int idx) {
    return _lua_isstring(L, idx);
  }

  late final _lua_isstringPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_isstring');
  late final _lua_isstring = _lua_isstringPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_iscfunction(ffi.Pointer<lua_State> L, int idx) {
    return _lua_iscfunction(L, idx);
  }

  late final _lua_iscfunctionPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_iscfunction');
  late final _lua_iscfunction = _lua_iscfunctionPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_isinteger(ffi.Pointer<lua_State> L, int idx) {
    return _lua_isinteger(L, idx);
  }

  late final _lua_isintegerPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_isinteger');
  late final _lua_isinteger = _lua_isintegerPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_isuserdata(ffi.Pointer<lua_State> L, int idx) {
    return _lua_isuserdata(L, idx);
  }

  late final _lua_isuserdataPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_isuserdata');
  late final _lua_isuserdata = _lua_isuserdataPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_type(ffi.Pointer<lua_State> L, int idx) {
    return _lua_type(L, idx);
  }

  late final _lua_typePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_type');
  late final _lua_type = _lua_typePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<ffi.Char> lua_typename(ffi.Pointer<lua_State> L, int tp) {
    return _lua_typename(L, tp);
  }

  late final _lua_typenamePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<lua_State>, ffi.Int)
        >
      >('lua_typename');
  late final _lua_typename = _lua_typenamePtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<lua_State>, int)
      >();

  double lua_tonumberx(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int> isnum,
  ) {
    return _lua_tonumberx(L, idx, isnum);
  }

  late final _lua_tonumberxPtr =
      _lookup<
        ffi.NativeFunction<
          lua_Number Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('lua_tonumberx');
  late final _lua_tonumberx = _lua_tonumberxPtr
      .asFunction<
        double Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int>)
      >();

  int lua_tointegerx(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int> isnum,
  ) {
    return _lua_tointegerx(L, idx, isnum);
  }

  late final _lua_tointegerxPtr =
      _lookup<
        ffi.NativeFunction<
          lua_Integer Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('lua_tointegerx');
  late final _lua_tointegerx = _lua_tointegerxPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int>)
      >();

  int lua_toboolean(ffi.Pointer<lua_State> L, int idx) {
    return _lua_toboolean(L, idx);
  }

  late final _lua_tobooleanPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_toboolean');
  late final _lua_toboolean = _lua_tobooleanPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<ffi.Char> lua_tolstring(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _lua_tolstring(L, idx, len);
  }

  late final _lua_tolstringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('lua_tolstring');
  late final _lua_tolstring = _lua_tolstringPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<lua_State>,
          int,
          ffi.Pointer<ffi.Size>,
        )
      >();

  int lua_rawlen(ffi.Pointer<lua_State> L, int idx) {
    return _lua_rawlen(L, idx);
  }

  late final _lua_rawlenPtr =
      _lookup<
        ffi.NativeFunction<
          lua_Unsigned Function(ffi.Pointer<lua_State>, ffi.Int)
        >
      >('lua_rawlen');
  late final _lua_rawlen = _lua_rawlenPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  lua_CFunction lua_tocfunction(ffi.Pointer<lua_State> L, int idx) {
    return _lua_tocfunction(L, idx);
  }

  late final _lua_tocfunctionPtr =
      _lookup<
        ffi.NativeFunction<
          lua_CFunction Function(ffi.Pointer<lua_State>, ffi.Int)
        >
      >('lua_tocfunction');
  late final _lua_tocfunction = _lua_tocfunctionPtr
      .asFunction<lua_CFunction Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<ffi.Void> lua_touserdata(ffi.Pointer<lua_State> L, int idx) {
    return _lua_touserdata(L, idx);
  }

  late final _lua_touserdataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, ffi.Int)
        >
      >('lua_touserdata');
  late final _lua_touserdata = _lua_touserdataPtr
      .asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, int)
      >();

  ffi.Pointer<lua_State> lua_tothread(ffi.Pointer<lua_State> L, int idx) {
    return _lua_tothread(L, idx);
  }

  late final _lua_tothreadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<lua_State> Function(ffi.Pointer<lua_State>, ffi.Int)
        >
      >('lua_tothread');
  late final _lua_tothread = _lua_tothreadPtr
      .asFunction<
        ffi.Pointer<lua_State> Function(ffi.Pointer<lua_State>, int)
      >();

  ffi.Pointer<ffi.Void> lua_topointer(ffi.Pointer<lua_State> L, int idx) {
    return _lua_topointer(L, idx);
  }

  late final _lua_topointerPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, ffi.Int)
        >
      >('lua_topointer');
  late final _lua_topointer = _lua_topointerPtr
      .asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, int)
      >();

  void lua_arith(ffi.Pointer<lua_State> L, int op) {
    return _lua_arith(L, op);
  }

  late final _lua_arithPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_arith');
  late final _lua_arith = _lua_arithPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int lua_rawequal(ffi.Pointer<lua_State> L, int idx1, int idx2) {
    return _lua_rawequal(L, idx1, idx2);
  }

  late final _lua_rawequalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int, ffi.Int)
        >
      >('lua_rawequal');
  late final _lua_rawequal = _lua_rawequalPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_compare(ffi.Pointer<lua_State> L, int idx1, int idx2, int op) {
    return _lua_compare(L, idx1, idx2, op);
  }

  late final _lua_comparePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int, ffi.Int, ffi.Int)
        >
      >('lua_compare');
  late final _lua_compare = _lua_comparePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int, int)>();

  /// push functions (C -> stack)
  void lua_pushnil(ffi.Pointer<lua_State> L) {
    return _lua_pushnil(L);
  }

  late final _lua_pushnilPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
        'lua_pushnil',
      );
  late final _lua_pushnil = _lua_pushnilPtr
      .asFunction<void Function(ffi.Pointer<lua_State>)>();

  void lua_pushnumber(ffi.Pointer<lua_State> L, double n) {
    return _lua_pushnumber(L, n);
  }

  late final _lua_pushnumberPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, lua_Number)
        >
      >('lua_pushnumber');
  late final _lua_pushnumber = _lua_pushnumberPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, double)>();

  void lua_pushinteger(ffi.Pointer<lua_State> L, int n) {
    return _lua_pushinteger(L, n);
  }

  late final _lua_pushintegerPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, lua_Integer)
        >
      >('lua_pushinteger');
  late final _lua_pushinteger = _lua_pushintegerPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<ffi.Char> lua_pushlstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Char> s,
    int len,
  ) {
    return _lua_pushlstring(L, s, len);
  }

  late final _lua_pushlstringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('lua_pushlstring');
  late final _lua_pushlstring = _lua_pushlstringPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  ffi.Pointer<ffi.Char> lua_pushstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Char> s,
  ) {
    return _lua_pushstring(L, s);
  }

  late final _lua_pushstringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('lua_pushstring');
  late final _lua_pushstring = _lua_pushstringPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  ffi.Pointer<ffi.Char> lua_pushvfstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Char> fmt,
    va_list argp,
  ) {
    return _lua_pushvfstring(L, fmt, argp);
  }

  late final _lua_pushvfstringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Char>,
            va_list,
          )
        >
      >('lua_pushvfstring');
  late final _lua_pushvfstring = _lua_pushvfstringPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Char>,
          va_list,
        )
      >();

  ffi.Pointer<ffi.Char> lua_pushfstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _lua_pushfstring(L, fmt);
  }

  late final _lua_pushfstringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('lua_pushfstring');
  late final _lua_pushfstring = _lua_pushfstringPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  void lua_pushcclosure(ffi.Pointer<lua_State> L, lua_CFunction fn, int n) {
    return _lua_pushcclosure(L, fn, n);
  }

  late final _lua_pushcclosurePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, lua_CFunction, ffi.Int)
        >
      >('lua_pushcclosure');
  late final _lua_pushcclosure = _lua_pushcclosurePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, lua_CFunction, int)>();

  void lua_pushboolean(ffi.Pointer<lua_State> L, int b) {
    return _lua_pushboolean(L, b);
  }

  late final _lua_pushbooleanPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_pushboolean');
  late final _lua_pushboolean = _lua_pushbooleanPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_pushlightuserdata(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Void> p,
  ) {
    return _lua_pushlightuserdata(L, p);
  }

  late final _lua_pushlightuserdataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Void>)
        >
      >('lua_pushlightuserdata');
  late final _lua_pushlightuserdata = _lua_pushlightuserdataPtr
      .asFunction<
        void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Void>)
      >();

  int lua_pushthread(ffi.Pointer<lua_State> L) {
    return _lua_pushthread(L);
  }

  late final _lua_pushthreadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'lua_pushthread',
      );
  late final _lua_pushthread = _lua_pushthreadPtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  /// get functions (Lua -> stack)
  int lua_getglobal(ffi.Pointer<lua_State> L, ffi.Pointer<ffi.Char> name) {
    return _lua_getglobal(L, name);
  }

  late final _lua_getglobalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
        >
      >('lua_getglobal');
  late final _lua_getglobal = _lua_getglobalPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
      >();

  int lua_gettable(ffi.Pointer<lua_State> L, int idx) {
    return _lua_gettable(L, idx);
  }

  late final _lua_gettablePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_gettable');
  late final _lua_gettable = _lua_gettablePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_getfield(ffi.Pointer<lua_State> L, int idx, ffi.Pointer<ffi.Char> k) {
    return _lua_getfield(L, idx, k);
  }

  late final _lua_getfieldPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('lua_getfield');
  late final _lua_getfield = _lua_getfieldPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Char>)
      >();

  int lua_geti(ffi.Pointer<lua_State> L, int idx, int n) {
    return _lua_geti(L, idx, n);
  }

  late final _lua_getiPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int, lua_Integer)
        >
      >('lua_geti');
  late final _lua_geti = _lua_getiPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_rawget(ffi.Pointer<lua_State> L, int idx) {
    return _lua_rawget(L, idx);
  }

  late final _lua_rawgetPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_rawget');
  late final _lua_rawget = _lua_rawgetPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_rawgeti(ffi.Pointer<lua_State> L, int idx, int n) {
    return _lua_rawgeti(L, idx, n);
  }

  late final _lua_rawgetiPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int, lua_Integer)
        >
      >('lua_rawgeti');
  late final _lua_rawgeti = _lua_rawgetiPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_rawgetp(ffi.Pointer<lua_State> L, int idx, ffi.Pointer<ffi.Void> p) {
    return _lua_rawgetp(L, idx, p);
  }

  late final _lua_rawgetpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('lua_rawgetp');
  late final _lua_rawgetp = _lua_rawgetpPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Void>)
      >();

  void lua_createtable(ffi.Pointer<lua_State> L, int narr, int nrec) {
    return _lua_createtable(L, narr, nrec);
  }

  late final _lua_createtablePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int, ffi.Int)
        >
      >('lua_createtable');
  late final _lua_createtable = _lua_createtablePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  ffi.Pointer<ffi.Void> lua_newuserdatauv(
    ffi.Pointer<lua_State> L,
    int sz,
    int nuvalue,
  ) {
    return _lua_newuserdatauv(L, sz, nuvalue);
  }

  late final _lua_newuserdatauvPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<lua_State>,
            ffi.Size,
            ffi.Int,
          )
        >
      >('lua_newuserdatauv');
  late final _lua_newuserdatauv = _lua_newuserdatauvPtr
      .asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, int, int)
      >();

  int lua_getmetatable(ffi.Pointer<lua_State> L, int objindex) {
    return _lua_getmetatable(L, objindex);
  }

  late final _lua_getmetatablePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_getmetatable');
  late final _lua_getmetatable = _lua_getmetatablePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_getiuservalue(ffi.Pointer<lua_State> L, int idx, int n) {
    return _lua_getiuservalue(L, idx, n);
  }

  late final _lua_getiuservaluePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int, ffi.Int)
        >
      >('lua_getiuservalue');
  late final _lua_getiuservalue = _lua_getiuservaluePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  /// set functions (stack -> Lua)
  void lua_setglobal(ffi.Pointer<lua_State> L, ffi.Pointer<ffi.Char> name) {
    return _lua_setglobal(L, name);
  }

  late final _lua_setglobalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
        >
      >('lua_setglobal');
  late final _lua_setglobal = _lua_setglobalPtr
      .asFunction<
        void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
      >();

  void lua_settable(ffi.Pointer<lua_State> L, int idx) {
    return _lua_settable(L, idx);
  }

  late final _lua_settablePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_settable');
  late final _lua_settable = _lua_settablePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_setfield(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Char> k,
  ) {
    return _lua_setfield(L, idx, k);
  }

  late final _lua_setfieldPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('lua_setfield');
  late final _lua_setfield = _lua_setfieldPtr
      .asFunction<
        void Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Char>)
      >();

  void lua_seti(ffi.Pointer<lua_State> L, int idx, int n) {
    return _lua_seti(L, idx, n);
  }

  late final _lua_setiPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int, lua_Integer)
        >
      >('lua_seti');
  late final _lua_seti = _lua_setiPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  void lua_rawset(ffi.Pointer<lua_State> L, int idx) {
    return _lua_rawset(L, idx);
  }

  late final _lua_rawsetPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_rawset');
  late final _lua_rawset = _lua_rawsetPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_rawseti(ffi.Pointer<lua_State> L, int idx, int n) {
    return _lua_rawseti(L, idx, n);
  }

  late final _lua_rawsetiPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int, lua_Integer)
        >
      >('lua_rawseti');
  late final _lua_rawseti = _lua_rawsetiPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  void lua_rawsetp(ffi.Pointer<lua_State> L, int idx, ffi.Pointer<ffi.Void> p) {
    return _lua_rawsetp(L, idx, p);
  }

  late final _lua_rawsetpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('lua_rawsetp');
  late final _lua_rawsetp = _lua_rawsetpPtr
      .asFunction<
        void Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Void>)
      >();

  int lua_setmetatable(ffi.Pointer<lua_State> L, int objindex) {
    return _lua_setmetatable(L, objindex);
  }

  late final _lua_setmetatablePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_setmetatable');
  late final _lua_setmetatable = _lua_setmetatablePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_setiuservalue(ffi.Pointer<lua_State> L, int idx, int n) {
    return _lua_setiuservalue(L, idx, n);
  }

  late final _lua_setiuservaluePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int, ffi.Int)
        >
      >('lua_setiuservalue');
  late final _lua_setiuservalue = _lua_setiuservaluePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  /// 'load' and 'call' functions (load and run Lua code)
  void lua_callk(
    ffi.Pointer<lua_State> L,
    int nargs,
    int nresults,
    int ctx,
    lua_KFunction k,
  ) {
    return _lua_callk(L, nargs, nresults, ctx, k);
  }

  late final _lua_callkPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Int,
            lua_KContext,
            lua_KFunction,
          )
        >
      >('lua_callk');
  late final _lua_callk = _lua_callkPtr
      .asFunction<
        void Function(ffi.Pointer<lua_State>, int, int, int, lua_KFunction)
      >();

  int lua_pcallk(
    ffi.Pointer<lua_State> L,
    int nargs,
    int nresults,
    int errfunc,
    int ctx,
    lua_KFunction k,
  ) {
    return _lua_pcallk(L, nargs, nresults, errfunc, ctx, k);
  }

  late final _lua_pcallkPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            lua_KContext,
            lua_KFunction,
          )
        >
      >('lua_pcallk');
  late final _lua_pcallk = _lua_pcallkPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, int, int, int, int, lua_KFunction)
      >();

  int lua_load(
    ffi.Pointer<lua_State> L,
    lua_Reader reader,
    ffi.Pointer<ffi.Void> dt,
    ffi.Pointer<ffi.Char> chunkname,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _lua_load(L, reader, dt, chunkname, mode);
  }

  late final _lua_loadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            lua_Reader,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('lua_load');
  late final _lua_load = _lua_loadPtr
      .asFunction<
        int Function(
          ffi.Pointer<lua_State>,
          lua_Reader,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  int lua_dump(
    ffi.Pointer<lua_State> L,
    lua_Writer writer,
    ffi.Pointer<ffi.Void> data,
    int strip,
  ) {
    return _lua_dump(L, writer, data, strip);
  }

  late final _lua_dumpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            lua_Writer,
            ffi.Pointer<ffi.Void>,
            ffi.Int,
          )
        >
      >('lua_dump');
  late final _lua_dump = _lua_dumpPtr
      .asFunction<
        int Function(
          ffi.Pointer<lua_State>,
          lua_Writer,
          ffi.Pointer<ffi.Void>,
          int,
        )
      >();

  /// coroutine functions
  int lua_yieldk(
    ffi.Pointer<lua_State> L,
    int nresults,
    int ctx,
    lua_KFunction k,
  ) {
    return _lua_yieldk(L, nresults, ctx, k);
  }

  late final _lua_yieldkPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            lua_KContext,
            lua_KFunction,
          )
        >
      >('lua_yieldk');
  late final _lua_yieldk = _lua_yieldkPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, int, int, lua_KFunction)
      >();

  int lua_resume(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_State> from,
    int narg,
    ffi.Pointer<ffi.Int> nres,
  ) {
    return _lua_resume(L, from, narg, nres);
  }

  late final _lua_resumePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('lua_resume');
  late final _lua_resume = _lua_resumePtr
      .asFunction<
        int Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<lua_State>,
          int,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int lua_status(ffi.Pointer<lua_State> L) {
    return _lua_status(L);
  }

  late final _lua_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'lua_status',
      );
  late final _lua_status = _lua_statusPtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  int lua_isyieldable(ffi.Pointer<lua_State> L) {
    return _lua_isyieldable(L);
  }

  late final _lua_isyieldablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'lua_isyieldable',
      );
  late final _lua_isyieldable = _lua_isyieldablePtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  /// Warning-related functions
  void lua_setwarnf(
    ffi.Pointer<lua_State> L,
    lua_WarnFunction f,
    ffi.Pointer<ffi.Void> ud,
  ) {
    return _lua_setwarnf(L, f, ud);
  }

  late final _lua_setwarnfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<lua_State>,
            lua_WarnFunction,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('lua_setwarnf');
  late final _lua_setwarnf = _lua_setwarnfPtr
      .asFunction<
        void Function(
          ffi.Pointer<lua_State>,
          lua_WarnFunction,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void lua_warning(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Char> msg,
    int tocont,
  ) {
    return _lua_warning(L, msg, tocont);
  }

  late final _lua_warningPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('lua_warning');
  late final _lua_warning = _lua_warningPtr
      .asFunction<
        void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>, int)
      >();

  int lua_gc(ffi.Pointer<lua_State> L, int what) {
    return _lua_gc(L, what);
  }

  late final _lua_gcPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_gc');
  late final _lua_gc = _lua_gcPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  /// miscellaneous functions
  int lua_error(ffi.Pointer<lua_State> L) {
    return _lua_error(L);
  }

  late final _lua_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'lua_error',
      );
  late final _lua_error = _lua_errorPtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  int lua_next(ffi.Pointer<lua_State> L, int idx) {
    return _lua_next(L, idx);
  }

  late final _lua_nextPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_next');
  late final _lua_next = _lua_nextPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  void lua_concat(ffi.Pointer<lua_State> L, int n) {
    return _lua_concat(L, n);
  }

  late final _lua_concatPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_concat');
  late final _lua_concat = _lua_concatPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_len(ffi.Pointer<lua_State> L, int idx) {
    return _lua_len(L, idx);
  }

  late final _lua_lenPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_len');
  late final _lua_len = _lua_lenPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int lua_stringtonumber(ffi.Pointer<lua_State> L, ffi.Pointer<ffi.Char> s) {
    return _lua_stringtonumber(L, s);
  }

  late final _lua_stringtonumberPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
        >
      >('lua_stringtonumber');
  late final _lua_stringtonumber = _lua_stringtonumberPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
      >();

  lua_Alloc lua_getallocf(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ud,
  ) {
    return _lua_getallocf(L, ud);
  }

  late final _lua_getallocfPtr =
      _lookup<
        ffi.NativeFunction<
          lua_Alloc Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>,
          )
        >
      >('lua_getallocf');
  late final _lua_getallocf = _lua_getallocfPtr
      .asFunction<
        lua_Alloc Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
        )
      >();

  void lua_setallocf(
    ffi.Pointer<lua_State> L,
    lua_Alloc f,
    ffi.Pointer<ffi.Void> ud,
  ) {
    return _lua_setallocf(L, f, ud);
  }

  late final _lua_setallocfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<lua_State>,
            lua_Alloc,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('lua_setallocf');
  late final _lua_setallocf = _lua_setallocfPtr
      .asFunction<
        void Function(ffi.Pointer<lua_State>, lua_Alloc, ffi.Pointer<ffi.Void>)
      >();

  void lua_toclose(ffi.Pointer<lua_State> L, int idx) {
    return _lua_toclose(L, idx);
  }

  late final _lua_toclosePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_toclose');
  late final _lua_toclose = _lua_toclosePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_closeslot(ffi.Pointer<lua_State> L, int idx) {
    return _lua_closeslot(L, idx);
  }

  late final _lua_closeslotPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('lua_closeslot');
  late final _lua_closeslot = _lua_closeslotPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int lua_getstack(
    ffi.Pointer<lua_State> L,
    int level,
    ffi.Pointer<lua_Debug> ar,
  ) {
    return _lua_getstack(L, level, ar);
  }

  late final _lua_getstackPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<lua_Debug>,
          )
        >
      >('lua_getstack');
  late final _lua_getstack = _lua_getstackPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<lua_Debug>)
      >();

  int lua_getinfo(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Char> what,
    ffi.Pointer<lua_Debug> ar,
  ) {
    return _lua_getinfo(L, what, ar);
  }

  late final _lua_getinfoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<lua_Debug>,
          )
        >
      >('lua_getinfo');
  late final _lua_getinfo = _lua_getinfoPtr
      .asFunction<
        int Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<lua_Debug>,
        )
      >();

  ffi.Pointer<ffi.Char> lua_getlocal(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_Debug> ar,
    int n,
  ) {
    return _lua_getlocal(L, ar, n);
  }

  late final _lua_getlocalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<lua_Debug>,
            ffi.Int,
          )
        >
      >('lua_getlocal');
  late final _lua_getlocal = _lua_getlocalPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<lua_Debug>,
          int,
        )
      >();

  ffi.Pointer<ffi.Char> lua_setlocal(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_Debug> ar,
    int n,
  ) {
    return _lua_setlocal(L, ar, n);
  }

  late final _lua_setlocalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<lua_Debug>,
            ffi.Int,
          )
        >
      >('lua_setlocal');
  late final _lua_setlocal = _lua_setlocalPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<lua_Debug>,
          int,
        )
      >();

  ffi.Pointer<ffi.Char> lua_getupvalue(
    ffi.Pointer<lua_State> L,
    int funcindex,
    int n,
  ) {
    return _lua_getupvalue(L, funcindex, n);
  }

  late final _lua_getupvaluePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Int,
          )
        >
      >('lua_getupvalue');
  late final _lua_getupvalue = _lua_getupvaluePtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<lua_State>, int, int)
      >();

  ffi.Pointer<ffi.Char> lua_setupvalue(
    ffi.Pointer<lua_State> L,
    int funcindex,
    int n,
  ) {
    return _lua_setupvalue(L, funcindex, n);
  }

  late final _lua_setupvaluePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Int,
          )
        >
      >('lua_setupvalue');
  late final _lua_setupvalue = _lua_setupvaluePtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<lua_State>, int, int)
      >();

  ffi.Pointer<ffi.Void> lua_upvalueid(
    ffi.Pointer<lua_State> L,
    int fidx,
    int n,
  ) {
    return _lua_upvalueid(L, fidx, n);
  }

  late final _lua_upvalueidPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Int,
          )
        >
      >('lua_upvalueid');
  late final _lua_upvalueid = _lua_upvalueidPtr
      .asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, int, int)
      >();

  void lua_upvaluejoin(
    ffi.Pointer<lua_State> L,
    int fidx1,
    int n1,
    int fidx2,
    int n2,
  ) {
    return _lua_upvaluejoin(L, fidx1, n1, fidx2, n2);
  }

  late final _lua_upvaluejoinPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Int,
          )
        >
      >('lua_upvaluejoin');
  late final _lua_upvaluejoin = _lua_upvaluejoinPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int, int, int)>();

  void lua_sethook(
    ffi.Pointer<lua_State> L,
    lua_Hook func,
    int mask,
    int count,
  ) {
    return _lua_sethook(L, func, mask, count);
  }

  late final _lua_sethookPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, lua_Hook, ffi.Int, ffi.Int)
        >
      >('lua_sethook');
  late final _lua_sethook = _lua_sethookPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, lua_Hook, int, int)>();

  lua_Hook lua_gethook(ffi.Pointer<lua_State> L) {
    return _lua_gethook(L);
  }

  late final _lua_gethookPtr =
      _lookup<ffi.NativeFunction<lua_Hook Function(ffi.Pointer<lua_State>)>>(
        'lua_gethook',
      );
  late final _lua_gethook = _lua_gethookPtr
      .asFunction<lua_Hook Function(ffi.Pointer<lua_State>)>();

  int lua_gethookmask(ffi.Pointer<lua_State> L) {
    return _lua_gethookmask(L);
  }

  late final _lua_gethookmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'lua_gethookmask',
      );
  late final _lua_gethookmask = _lua_gethookmaskPtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  int lua_gethookcount(ffi.Pointer<lua_State> L) {
    return _lua_gethookcount(L);
  }

  late final _lua_gethookcountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'lua_gethookcount',
      );
  late final _lua_gethookcount = _lua_gethookcountPtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  int lua_setcstacklimit(ffi.Pointer<lua_State> L, int limit) {
    return _lua_setcstacklimit(L, limit);
  }

  late final _lua_setcstacklimitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lua_State>, ffi.UnsignedInt)
        >
      >('lua_setcstacklimit');
  late final _lua_setcstacklimit = _lua_setcstacklimitPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int luaopen_base(ffi.Pointer<lua_State> L) {
    return _luaopen_base(L);
  }

  late final _luaopen_basePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'luaopen_base',
      );
  late final _luaopen_base = _luaopen_basePtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  int luaopen_coroutine(ffi.Pointer<lua_State> L) {
    return _luaopen_coroutine(L);
  }

  late final _luaopen_coroutinePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'luaopen_coroutine',
      );
  late final _luaopen_coroutine = _luaopen_coroutinePtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  int luaopen_table(ffi.Pointer<lua_State> L) {
    return _luaopen_table(L);
  }

  late final _luaopen_tablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'luaopen_table',
      );
  late final _luaopen_table = _luaopen_tablePtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  int luaopen_io(ffi.Pointer<lua_State> L) {
    return _luaopen_io(L);
  }

  late final _luaopen_ioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'luaopen_io',
      );
  late final _luaopen_io = _luaopen_ioPtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  int luaopen_os(ffi.Pointer<lua_State> L) {
    return _luaopen_os(L);
  }

  late final _luaopen_osPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'luaopen_os',
      );
  late final _luaopen_os = _luaopen_osPtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  int luaopen_string(ffi.Pointer<lua_State> L) {
    return _luaopen_string(L);
  }

  late final _luaopen_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'luaopen_string',
      );
  late final _luaopen_string = _luaopen_stringPtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  int luaopen_utf8(ffi.Pointer<lua_State> L) {
    return _luaopen_utf8(L);
  }

  late final _luaopen_utf8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'luaopen_utf8',
      );
  late final _luaopen_utf8 = _luaopen_utf8Ptr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  int luaopen_math(ffi.Pointer<lua_State> L) {
    return _luaopen_math(L);
  }

  late final _luaopen_mathPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'luaopen_math',
      );
  late final _luaopen_math = _luaopen_mathPtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  int luaopen_debug(ffi.Pointer<lua_State> L) {
    return _luaopen_debug(L);
  }

  late final _luaopen_debugPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'luaopen_debug',
      );
  late final _luaopen_debug = _luaopen_debugPtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  int luaopen_package(ffi.Pointer<lua_State> L) {
    return _luaopen_package(L);
  }

  late final _luaopen_packagePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>)>>(
        'luaopen_package',
      );
  late final _luaopen_package = _luaopen_packagePtr
      .asFunction<int Function(ffi.Pointer<lua_State>)>();

  /// open all previous libraries
  void luaL_openlibs(ffi.Pointer<lua_State> L) {
    return _luaL_openlibs(L);
  }

  late final _luaL_openlibsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
        'luaL_openlibs',
      );
  late final _luaL_openlibs = _luaL_openlibsPtr
      .asFunction<void Function(ffi.Pointer<lua_State>)>();

  void luaL_checkversion_(ffi.Pointer<lua_State> L, double ver, int sz) {
    return _luaL_checkversion_(L, ver, sz);
  }

  late final _luaL_checkversion_Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, lua_Number, ffi.Size)
        >
      >('luaL_checkversion_');
  late final _luaL_checkversion_ = _luaL_checkversion_Ptr
      .asFunction<void Function(ffi.Pointer<lua_State>, double, int)>();

  int luaL_getmetafield(
    ffi.Pointer<lua_State> L,
    int obj,
    ffi.Pointer<ffi.Char> e,
  ) {
    return _luaL_getmetafield(L, obj, e);
  }

  late final _luaL_getmetafieldPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('luaL_getmetafield');
  late final _luaL_getmetafield = _luaL_getmetafieldPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Char>)
      >();

  int luaL_callmeta(
    ffi.Pointer<lua_State> L,
    int obj,
    ffi.Pointer<ffi.Char> e,
  ) {
    return _luaL_callmeta(L, obj, e);
  }

  late final _luaL_callmetaPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('luaL_callmeta');
  late final _luaL_callmeta = _luaL_callmetaPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<ffi.Char> luaL_tolstring(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _luaL_tolstring(L, idx, len);
  }

  late final _luaL_tolstringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('luaL_tolstring');
  late final _luaL_tolstring = _luaL_tolstringPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<lua_State>,
          int,
          ffi.Pointer<ffi.Size>,
        )
      >();

  int luaL_argerror(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Char> extramsg,
  ) {
    return _luaL_argerror(L, arg, extramsg);
  }

  late final _luaL_argerrorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('luaL_argerror');
  late final _luaL_argerror = _luaL_argerrorPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Char>)
      >();

  int luaL_typeerror(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Char> tname,
  ) {
    return _luaL_typeerror(L, arg, tname);
  }

  late final _luaL_typeerrorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('luaL_typeerror');
  late final _luaL_typeerror = _luaL_typeerrorPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<ffi.Char> luaL_checklstring(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Size> l,
  ) {
    return _luaL_checklstring(L, arg, l);
  }

  late final _luaL_checklstringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('luaL_checklstring');
  late final _luaL_checklstring = _luaL_checklstringPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<lua_State>,
          int,
          ffi.Pointer<ffi.Size>,
        )
      >();

  ffi.Pointer<ffi.Char> luaL_optlstring(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Char> def,
    ffi.Pointer<ffi.Size> l,
  ) {
    return _luaL_optlstring(L, arg, def, l);
  }

  late final _luaL_optlstringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('luaL_optlstring');
  late final _luaL_optlstring = _luaL_optlstringPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<lua_State>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  double luaL_checknumber(ffi.Pointer<lua_State> L, int arg) {
    return _luaL_checknumber(L, arg);
  }

  late final _luaL_checknumberPtr =
      _lookup<
        ffi.NativeFunction<lua_Number Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('luaL_checknumber');
  late final _luaL_checknumber = _luaL_checknumberPtr
      .asFunction<double Function(ffi.Pointer<lua_State>, int)>();

  double luaL_optnumber(ffi.Pointer<lua_State> L, int arg, double def) {
    return _luaL_optnumber(L, arg, def);
  }

  late final _luaL_optnumberPtr =
      _lookup<
        ffi.NativeFunction<
          lua_Number Function(ffi.Pointer<lua_State>, ffi.Int, lua_Number)
        >
      >('luaL_optnumber');
  late final _luaL_optnumber = _luaL_optnumberPtr
      .asFunction<double Function(ffi.Pointer<lua_State>, int, double)>();

  int luaL_checkinteger(ffi.Pointer<lua_State> L, int arg) {
    return _luaL_checkinteger(L, arg);
  }

  late final _luaL_checkintegerPtr =
      _lookup<
        ffi.NativeFunction<
          lua_Integer Function(ffi.Pointer<lua_State>, ffi.Int)
        >
      >('luaL_checkinteger');
  late final _luaL_checkinteger = _luaL_checkintegerPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int luaL_optinteger(ffi.Pointer<lua_State> L, int arg, int def) {
    return _luaL_optinteger(L, arg, def);
  }

  late final _luaL_optintegerPtr =
      _lookup<
        ffi.NativeFunction<
          lua_Integer Function(ffi.Pointer<lua_State>, ffi.Int, lua_Integer)
        >
      >('luaL_optinteger');
  late final _luaL_optinteger = _luaL_optintegerPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  void luaL_checkstack(
    ffi.Pointer<lua_State> L,
    int sz,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _luaL_checkstack(L, sz, msg);
  }

  late final _luaL_checkstackPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('luaL_checkstack');
  late final _luaL_checkstack = _luaL_checkstackPtr
      .asFunction<
        void Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Char>)
      >();

  void luaL_checktype(ffi.Pointer<lua_State> L, int arg, int t) {
    return _luaL_checktype(L, arg, t);
  }

  late final _luaL_checktypePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int, ffi.Int)
        >
      >('luaL_checktype');
  late final _luaL_checktype = _luaL_checktypePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  void luaL_checkany(ffi.Pointer<lua_State> L, int arg) {
    return _luaL_checkany(L, arg);
  }

  late final _luaL_checkanyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('luaL_checkany');
  late final _luaL_checkany = _luaL_checkanyPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int luaL_newmetatable(ffi.Pointer<lua_State> L, ffi.Pointer<ffi.Char> tname) {
    return _luaL_newmetatable(L, tname);
  }

  late final _luaL_newmetatablePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
        >
      >('luaL_newmetatable');
  late final _luaL_newmetatable = _luaL_newmetatablePtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
      >();

  void luaL_setmetatable(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Char> tname,
  ) {
    return _luaL_setmetatable(L, tname);
  }

  late final _luaL_setmetatablePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
        >
      >('luaL_setmetatable');
  late final _luaL_setmetatable = _luaL_setmetatablePtr
      .asFunction<
        void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<ffi.Void> luaL_testudata(
    ffi.Pointer<lua_State> L,
    int ud,
    ffi.Pointer<ffi.Char> tname,
  ) {
    return _luaL_testudata(L, ud, tname);
  }

  late final _luaL_testudataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('luaL_testudata');
  late final _luaL_testudata = _luaL_testudataPtr
      .asFunction<
        ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<lua_State>,
          int,
          ffi.Pointer<ffi.Char>,
        )
      >();

  ffi.Pointer<ffi.Void> luaL_checkudata(
    ffi.Pointer<lua_State> L,
    int ud,
    ffi.Pointer<ffi.Char> tname,
  ) {
    return _luaL_checkudata(L, ud, tname);
  }

  late final _luaL_checkudataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('luaL_checkudata');
  late final _luaL_checkudata = _luaL_checkudataPtr
      .asFunction<
        ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<lua_State>,
          int,
          ffi.Pointer<ffi.Char>,
        )
      >();

  void luaL_where(ffi.Pointer<lua_State> L, int lvl) {
    return _luaL_where(L, lvl);
  }

  late final _luaL_wherePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('luaL_where');
  late final _luaL_where = _luaL_wherePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int luaL_error(ffi.Pointer<lua_State> L, ffi.Pointer<ffi.Char> fmt) {
    return _luaL_error(L, fmt);
  }

  late final _luaL_errorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
        >
      >('luaL_error');
  late final _luaL_error = _luaL_errorPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
      >();

  int luaL_checkoption(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Char> def,
    ffi.Pointer<ffi.Pointer<ffi.Char>> lst,
  ) {
    return _luaL_checkoption(L, arg, def, lst);
  }

  late final _luaL_checkoptionPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('luaL_checkoption');
  late final _luaL_checkoption = _luaL_checkoptionPtr
      .asFunction<
        int Function(
          ffi.Pointer<lua_State>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int luaL_fileresult(
    ffi.Pointer<lua_State> L,
    int stat,
    ffi.Pointer<ffi.Char> fname,
  ) {
    return _luaL_fileresult(L, stat, fname);
  }

  late final _luaL_fileresultPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('luaL_fileresult');
  late final _luaL_fileresult = _luaL_fileresultPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Char>)
      >();

  int luaL_execresult(ffi.Pointer<lua_State> L, int stat) {
    return _luaL_execresult(L, stat);
  }

  late final _luaL_execresultPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('luaL_execresult');
  late final _luaL_execresult = _luaL_execresultPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int luaL_ref(ffi.Pointer<lua_State> L, int t) {
    return _luaL_ref(L, t);
  }

  late final _luaL_refPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<lua_State>, ffi.Int)>
      >('luaL_ref');
  late final _luaL_ref = _luaL_refPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  void luaL_unref(ffi.Pointer<lua_State> L, int t, int ref) {
    return _luaL_unref(L, t, ref);
  }

  late final _luaL_unrefPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int, ffi.Int)
        >
      >('luaL_unref');
  late final _luaL_unref = _luaL_unrefPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  int luaL_loadfilex(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _luaL_loadfilex(L, filename, mode);
  }

  late final _luaL_loadfilexPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('luaL_loadfilex');
  late final _luaL_loadfilex = _luaL_loadfilexPtr
      .asFunction<
        int Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  int luaL_loadbufferx(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Char> buff,
    int sz,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _luaL_loadbufferx(L, buff, sz, name, mode);
  }

  late final _luaL_loadbufferxPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('luaL_loadbufferx');
  late final _luaL_loadbufferx = _luaL_loadbufferxPtr
      .asFunction<
        int Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  int luaL_loadstring(ffi.Pointer<lua_State> L, ffi.Pointer<ffi.Char> s) {
    return _luaL_loadstring(L, s);
  }

  late final _luaL_loadstringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
        >
      >('luaL_loadstring');
  late final _luaL_loadstring = _luaL_loadstringPtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<lua_State> luaL_newstate() {
    return _luaL_newstate();
  }

  late final _luaL_newstatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<lua_State> Function()>>(
        'luaL_newstate',
      );
  late final _luaL_newstate = _luaL_newstatePtr
      .asFunction<ffi.Pointer<lua_State> Function()>();

  int luaL_len(ffi.Pointer<lua_State> L, int idx) {
    return _luaL_len(L, idx);
  }

  late final _luaL_lenPtr =
      _lookup<
        ffi.NativeFunction<
          lua_Integer Function(ffi.Pointer<lua_State>, ffi.Int)
        >
      >('luaL_len');
  late final _luaL_len = _luaL_lenPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  void luaL_addgsub(
    ffi.Pointer<luaL_Buffer> b,
    ffi.Pointer<ffi.Char> s,
    ffi.Pointer<ffi.Char> p,
    ffi.Pointer<ffi.Char> r,
  ) {
    return _luaL_addgsub(b, s, p, r);
  }

  late final _luaL_addgsubPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<luaL_Buffer>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('luaL_addgsub');
  late final _luaL_addgsub = _luaL_addgsubPtr
      .asFunction<
        void Function(
          ffi.Pointer<luaL_Buffer>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  ffi.Pointer<ffi.Char> luaL_gsub(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Char> s,
    ffi.Pointer<ffi.Char> p,
    ffi.Pointer<ffi.Char> r,
  ) {
    return _luaL_gsub(L, s, p, r);
  }

  late final _luaL_gsubPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('luaL_gsub');
  late final _luaL_gsub = _luaL_gsubPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  void luaL_setfuncs(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<luaL_Reg> l,
    int nup,
  ) {
    return _luaL_setfuncs(L, l, nup);
  }

  late final _luaL_setfuncsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<luaL_Reg>,
            ffi.Int,
          )
        >
      >('luaL_setfuncs');
  late final _luaL_setfuncs = _luaL_setfuncsPtr
      .asFunction<
        void Function(ffi.Pointer<lua_State>, ffi.Pointer<luaL_Reg>, int)
      >();

  int luaL_getsubtable(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Char> fname,
  ) {
    return _luaL_getsubtable(L, idx, fname);
  }

  late final _luaL_getsubtablePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<lua_State>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('luaL_getsubtable');
  late final _luaL_getsubtable = _luaL_getsubtablePtr
      .asFunction<
        int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Char>)
      >();

  void luaL_traceback(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_State> L1,
    ffi.Pointer<ffi.Char> msg,
    int level,
  ) {
    return _luaL_traceback(L, L1, msg, level);
  }

  late final _luaL_tracebackPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('luaL_traceback');
  late final _luaL_traceback = _luaL_tracebackPtr
      .asFunction<
        void Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  void luaL_requiref(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Char> modname,
    lua_CFunction openf,
    int glb,
  ) {
    return _luaL_requiref(L, modname, openf, glb);
  }

  late final _luaL_requirefPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Char>,
            lua_CFunction,
            ffi.Int,
          )
        >
      >('luaL_requiref');
  late final _luaL_requiref = _luaL_requirefPtr
      .asFunction<
        void Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Char>,
          lua_CFunction,
          int,
        )
      >();

  void luaL_buffinit(ffi.Pointer<lua_State> L, ffi.Pointer<luaL_Buffer> B) {
    return _luaL_buffinit(L, B);
  }

  late final _luaL_buffinitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<luaL_Buffer>)
        >
      >('luaL_buffinit');
  late final _luaL_buffinit = _luaL_buffinitPtr
      .asFunction<
        void Function(ffi.Pointer<lua_State>, ffi.Pointer<luaL_Buffer>)
      >();

  ffi.Pointer<ffi.Char> luaL_prepbuffsize(ffi.Pointer<luaL_Buffer> B, int sz) {
    return _luaL_prepbuffsize(B, sz);
  }

  late final _luaL_prepbuffsizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<luaL_Buffer>, ffi.Size)
        >
      >('luaL_prepbuffsize');
  late final _luaL_prepbuffsize = _luaL_prepbuffsizePtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<luaL_Buffer>, int)
      >();

  void luaL_addlstring(
    ffi.Pointer<luaL_Buffer> B,
    ffi.Pointer<ffi.Char> s,
    int l,
  ) {
    return _luaL_addlstring(B, s, l);
  }

  late final _luaL_addlstringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<luaL_Buffer>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('luaL_addlstring');
  late final _luaL_addlstring = _luaL_addlstringPtr
      .asFunction<
        void Function(ffi.Pointer<luaL_Buffer>, ffi.Pointer<ffi.Char>, int)
      >();

  void luaL_addstring(ffi.Pointer<luaL_Buffer> B, ffi.Pointer<ffi.Char> s) {
    return _luaL_addstring(B, s);
  }

  late final _luaL_addstringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<luaL_Buffer>, ffi.Pointer<ffi.Char>)
        >
      >('luaL_addstring');
  late final _luaL_addstring = _luaL_addstringPtr
      .asFunction<
        void Function(ffi.Pointer<luaL_Buffer>, ffi.Pointer<ffi.Char>)
      >();

  void luaL_addvalue(ffi.Pointer<luaL_Buffer> B) {
    return _luaL_addvalue(B);
  }

  late final _luaL_addvaluePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<luaL_Buffer>)>>(
        'luaL_addvalue',
      );
  late final _luaL_addvalue = _luaL_addvaluePtr
      .asFunction<void Function(ffi.Pointer<luaL_Buffer>)>();

  void luaL_pushresult(ffi.Pointer<luaL_Buffer> B) {
    return _luaL_pushresult(B);
  }

  late final _luaL_pushresultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<luaL_Buffer>)>>(
        'luaL_pushresult',
      );
  late final _luaL_pushresult = _luaL_pushresultPtr
      .asFunction<void Function(ffi.Pointer<luaL_Buffer>)>();

  void luaL_pushresultsize(ffi.Pointer<luaL_Buffer> B, int sz) {
    return _luaL_pushresultsize(B, sz);
  }

  late final _luaL_pushresultsizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<luaL_Buffer>, ffi.Size)
        >
      >('luaL_pushresultsize');
  late final _luaL_pushresultsize = _luaL_pushresultsizePtr
      .asFunction<void Function(ffi.Pointer<luaL_Buffer>, int)>();

  ffi.Pointer<ffi.Char> luaL_buffinitsize(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<luaL_Buffer> B,
    int sz,
  ) {
    return _luaL_buffinitsize(L, B, sz);
  }

  late final _luaL_buffinitsizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<lua_State>,
            ffi.Pointer<luaL_Buffer>,
            ffi.Size,
          )
        >
      >('luaL_buffinitsize');
  late final _luaL_buffinitsize = _luaL_buffinitsizePtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<luaL_Buffer>,
          int,
        )
      >();

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(int a, int b) {
    return _sum(a, b);
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(int a, int b) {
    return _sum_long_running(a, b);
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
        'sum_long_running',
      );
  late final _sum_long_running = _sum_long_runningPtr
      .asFunction<int Function(int, int)>();

  lua_CFunction set_lua_panic_handle(
    ffi.Pointer<lua_State> L,
    lua_CFunction panicf,
  ) {
    return _set_lua_panic_handle(L, panicf);
  }

  late final _set_lua_panic_handlePtr =
      _lookup<
        ffi.NativeFunction<
          lua_CFunction Function(ffi.Pointer<lua_State>, lua_CFunction)
        >
      >('set_lua_panic_handle');
  late final _set_lua_panic_handle = _set_lua_panic_handlePtr
      .asFunction<
        lua_CFunction Function(ffi.Pointer<lua_State>, lua_CFunction)
      >();
}

final class lua_State extends ffi.Opaque {}

final class lua_Debug extends ffi.Struct {
  @ffi.Int()
  external int event;

  /// (n)
  external ffi.Pointer<ffi.Char> name;

  /// (n) 'global', 'local', 'field', 'method'
  external ffi.Pointer<ffi.Char> namewhat;

  /// (S) 'Lua', 'C', 'main', 'tail'
  external ffi.Pointer<ffi.Char> what;

  /// (S)
  external ffi.Pointer<ffi.Char> source;

  /// (S)
  @ffi.Size()
  external int srclen;

  /// (l)
  @ffi.Int()
  external int currentline;

  /// (S)
  @ffi.Int()
  external int linedefined;

  /// (S)
  @ffi.Int()
  external int lastlinedefined;

  /// (u) number of upvalues
  @ffi.UnsignedChar()
  external int nups;

  /// (u) number of parameters
  @ffi.UnsignedChar()
  external int nparams;

  /// (u)
  @ffi.Char()
  external int isvararg;

  /// (t)
  @ffi.Char()
  external int istailcall;

  /// (r) index of first value transferred
  @ffi.UnsignedShort()
  external int ftransfer;

  /// (r) number of transferred values
  @ffi.UnsignedShort()
  external int ntransfer;

  /// (S)
  @ffi.Array.multi([60])
  external ffi.Array<ffi.Char> short_src;

  /// active function
  external ffi.Pointer<CallInfo> i_ci;
}

final class CallInfo extends ffi.Opaque {}

/// Type for memory-allocation functions
typedef lua_Alloc = ffi.Pointer<ffi.NativeFunction<lua_AllocFunction>>;
typedef lua_AllocFunction =
    ffi.Pointer<ffi.Void> Function(
      ffi.Pointer<ffi.Void> ud,
      ffi.Pointer<ffi.Void> ptr,
      ffi.Size osize,
      ffi.Size nsize,
    );
typedef Dartlua_AllocFunction =
    ffi.Pointer<ffi.Void> Function(
      ffi.Pointer<ffi.Void> ud,
      ffi.Pointer<ffi.Void> ptr,
      int osize,
      int nsize,
    );

/// Type for C functions registered with Lua
typedef lua_CFunction = ffi.Pointer<ffi.NativeFunction<lua_CFunctionFunction>>;
typedef lua_CFunctionFunction = ffi.Int Function(ffi.Pointer<lua_State> L);
typedef Dartlua_CFunctionFunction = int Function(ffi.Pointer<lua_State> L);

/// type of numbers in Lua
typedef lua_Number = ffi.Double;
typedef Dartlua_Number = double;

/// type for integer functions
typedef lua_Integer = ffi.LongLong;
typedef Dartlua_Integer = int;

/// unsigned integer type
typedef lua_Unsigned = ffi.UnsignedLongLong;
typedef Dartlua_Unsigned = int;
typedef va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;

/// type for continuation-function contexts
typedef lua_KContext = ffi.IntPtr;
typedef Dartlua_KContext = int;

/// Type for continuation functions
typedef lua_KFunction = ffi.Pointer<ffi.NativeFunction<lua_KFunctionFunction>>;
typedef lua_KFunctionFunction =
    ffi.Int Function(
      ffi.Pointer<lua_State> L,
      ffi.Int status,
      lua_KContext ctx,
    );
typedef Dartlua_KFunctionFunction =
    int Function(ffi.Pointer<lua_State> L, int status, Dartlua_KContext ctx);

/// Type for functions that read/write blocks when loading/dumping Lua chunks
typedef lua_Reader = ffi.Pointer<ffi.NativeFunction<lua_ReaderFunction>>;
typedef lua_ReaderFunction =
    ffi.Pointer<ffi.Char> Function(
      ffi.Pointer<lua_State> L,
      ffi.Pointer<ffi.Void> ud,
      ffi.Pointer<ffi.Size> sz,
    );
typedef lua_Writer = ffi.Pointer<ffi.NativeFunction<lua_WriterFunction>>;
typedef lua_WriterFunction =
    ffi.Int Function(
      ffi.Pointer<lua_State> L,
      ffi.Pointer<ffi.Void> p,
      ffi.Size sz,
      ffi.Pointer<ffi.Void> ud,
    );
typedef Dartlua_WriterFunction =
    int Function(
      ffi.Pointer<lua_State> L,
      ffi.Pointer<ffi.Void> p,
      int sz,
      ffi.Pointer<ffi.Void> ud,
    );

/// Type for warning functions
typedef lua_WarnFunction =
    ffi.Pointer<ffi.NativeFunction<lua_WarnFunctionFunction>>;
typedef lua_WarnFunctionFunction =
    ffi.Void Function(
      ffi.Pointer<ffi.Void> ud,
      ffi.Pointer<ffi.Char> msg,
      ffi.Int tocont,
    );
typedef Dartlua_WarnFunctionFunction =
    void Function(
      ffi.Pointer<ffi.Void> ud,
      ffi.Pointer<ffi.Char> msg,
      int tocont,
    );

/// Functions to be called by the debugger in specific events
typedef lua_Hook = ffi.Pointer<ffi.NativeFunction<lua_HookFunction>>;
typedef lua_HookFunction =
    ffi.Void Function(ffi.Pointer<lua_State> L, ffi.Pointer<lua_Debug> ar);
typedef Dartlua_HookFunction =
    void Function(ffi.Pointer<lua_State> L, ffi.Pointer<lua_Debug> ar);

/// {======================================================
/// Generic Buffer manipulation
/// =======================================================
final class luaL_Buffer extends ffi.Struct {
  /// buffer address
  external ffi.Pointer<ffi.Char> b;

  /// buffer size
  @ffi.Size()
  external int size;

  /// number of characters in buffer
  @ffi.Size()
  external int n;

  external ffi.Pointer<lua_State> L;

  external UnnamedUnion1 init;
}

final class UnnamedUnion1 extends ffi.Union {
  /// ensure maximum alignment for buffer
  @lua_Number()
  external double n;

  @ffi.Double()
  external double u;

  external ffi.Pointer<ffi.Void> s;

  @lua_Integer()
  external int i;

  @ffi.Long()
  external int l;

  /// initial buffer
  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> b;
}

final class luaL_Reg extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external lua_CFunction func;
}

final class luaL_Stream extends ffi.Struct {
  /// stream (NULL for incompletely created streams)
  external ffi.Pointer<FILE> f;

  /// to close stream (NULL for closed streams)
  external lua_CFunction closef;
}

/// stdio state variables.
///
/// The following always hold:
///
/// if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
/// _lbfsize is -_bf._size, else _lbfsize is 0
/// if _flags&__SRD, _w is 0
/// if _flags&__SWR, _r is 0
///
/// This ensures that the getc and putc macros (or inline functions) never
/// try to write or read from a file that is in `read' or `write' mode.
/// (Moreover, they can, and do, automatically switch from read mode to
/// write mode, and back, on "r+" and "w+" files.)
///
/// _lbfsize is used only to make the inline line-buffered output stream
/// code as compact as possible.
///
/// _ub, _up, and _ur are used when ungetc() pushes back more characters
/// than fit in the current _bf, or when ungetc() pushes back a character
/// that does not match the previous one in _bf.  When this happens,
/// _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
/// _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
///
/// NB: see WARNING above before changing the layout of this structure!
typedef FILE = __sFILE;

/// stdio state variables.
///
/// The following always hold:
///
/// if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
/// _lbfsize is -_bf._size, else _lbfsize is 0
/// if _flags&__SRD, _w is 0
/// if _flags&__SWR, _r is 0
///
/// This ensures that the getc and putc macros (or inline functions) never
/// try to write or read from a file that is in `read' or `write' mode.
/// (Moreover, they can, and do, automatically switch from read mode to
/// write mode, and back, on "r+" and "w+" files.)
///
/// _lbfsize is used only to make the inline line-buffered output stream
/// code as compact as possible.
///
/// _ub, _up, and _ur are used when ungetc() pushes back more characters
/// than fit in the current _bf, or when ungetc() pushes back a character
/// that does not match the previous one in _bf.  When this happens,
/// _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
/// _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
///
/// NB: see WARNING above before changing the layout of this structure!
final class __sFILE extends ffi.Struct {
  /// current position in (some) buffer
  external ffi.Pointer<ffi.UnsignedChar> _p;

  /// read space left for getc()
  @ffi.Int()
  external int _r;

  /// write space left for putc()
  @ffi.Int()
  external int _w;

  /// flags, below; this FILE is free if 0
  @ffi.Short()
  external int _flags;

  /// fileno, if Unix descriptor, else -1
  @ffi.Short()
  external int _file;

  /// the buffer (at least 1 byte, if !NULL)
  external __sbuf _bf;

  /// 0 or -_bf._size, for inline putc
  @ffi.Int()
  external int _lbfsize;

  /// cookie passed to io functions
  external ffi.Pointer<ffi.Void> _cookie;

  external ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>
  >
  _close;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >
  _read;

  external ffi.Pointer<
    ffi.NativeFunction<fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>
  >
  _seek;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >
  _write;

  /// ungetc buffer
  external __sbuf _ub;

  /// additions to FILE to not break ABI
  external ffi.Pointer<__sFILEX> _extra;

  /// saved _r when _r is counting ungetc data
  @ffi.Int()
  external int _ur;

  /// guarantee an ungetc() buffer
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  /// guarantee a getc() buffer
  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  /// buffer for fgetln()
  external __sbuf _lb;

  /// stat.st_blksize (may be != _bf._size)
  @ffi.Int()
  external int _blksize;

  /// current lseek offset (see WARNING)
  @fpos_t()
  external int _offset;
}

/// stdio buffers
final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

typedef fpos_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;

/// hold a buncha junk that would grow the ABI
final class __sFILEX extends ffi.Opaque {}

const String LUA_VERSION_MAJOR = '5';

const String LUA_VERSION_MINOR = '4';

const String LUA_VERSION_RELEASE = '8';

const int LUA_VERSION_NUM = 504;

const int LUA_VERSION_RELEASE_NUM = 50408;

const String LUA_VERSION = 'Lua 5.4';

const String LUA_RELEASE = 'Lua 5.4.8';

const String LUA_COPYRIGHT =
    'Lua 5.4.8  Copyright (C) 1994-2025 Lua.org, PUC-Rio';

const String LUA_AUTHORS = 'R. Ierusalimschy, L. H. de Figueiredo, W. Celes';

const String LUA_SIGNATURE = '\x1BLua';

const int LUA_MULTRET = -1;

const int LUA_REGISTRYINDEX = -1001000;

const int LUA_OK = 0;

const int LUA_YIELD = 1;

const int LUA_ERRRUN = 2;

const int LUA_ERRSYNTAX = 3;

const int LUA_ERRMEM = 4;

const int LUA_ERRERR = 5;

const int LUA_TNONE = -1;

const int LUA_TNIL = 0;

const int LUA_TBOOLEAN = 1;

const int LUA_TLIGHTUSERDATA = 2;

const int LUA_TNUMBER = 3;

const int LUA_TSTRING = 4;

const int LUA_TTABLE = 5;

const int LUA_TFUNCTION = 6;

const int LUA_TUSERDATA = 7;

const int LUA_TTHREAD = 8;

const int LUA_NUMTYPES = 9;

const int LUA_MINSTACK = 20;

const int LUA_RIDX_MAINTHREAD = 1;

const int LUA_RIDX_GLOBALS = 2;

const int LUA_RIDX_LAST = 2;

const int LUA_OPADD = 0;

const int LUA_OPSUB = 1;

const int LUA_OPMUL = 2;

const int LUA_OPMOD = 3;

const int LUA_OPPOW = 4;

const int LUA_OPDIV = 5;

const int LUA_OPIDIV = 6;

const int LUA_OPBAND = 7;

const int LUA_OPBOR = 8;

const int LUA_OPBXOR = 9;

const int LUA_OPSHL = 10;

const int LUA_OPSHR = 11;

const int LUA_OPUNM = 12;

const int LUA_OPBNOT = 13;

const int LUA_OPEQ = 0;

const int LUA_OPLT = 1;

const int LUA_OPLE = 2;

const int LUA_GCSTOP = 0;

const int LUA_GCRESTART = 1;

const int LUA_GCCOLLECT = 2;

const int LUA_GCCOUNT = 3;

const int LUA_GCCOUNTB = 4;

const int LUA_GCSTEP = 5;

const int LUA_GCSETPAUSE = 6;

const int LUA_GCSETSTEPMUL = 7;

const int LUA_GCISRUNNING = 9;

const int LUA_GCGEN = 10;

const int LUA_GCINC = 11;

const int LUA_NUMTAGS = 9;

const int LUA_HOOKCALL = 0;

const int LUA_HOOKRET = 1;

const int LUA_HOOKLINE = 2;

const int LUA_HOOKCOUNT = 3;

const int LUA_HOOKTAILCALL = 4;

const int LUA_MASKCALL = 1;

const int LUA_MASKRET = 2;

const int LUA_MASKLINE = 4;

const int LUA_MASKCOUNT = 8;

const String LUA_VERSUFFIX = '_5_4';

const String LUA_COLIBNAME = 'coroutine';

const String LUA_TABLIBNAME = 'table';

const String LUA_IOLIBNAME = 'io';

const String LUA_OSLIBNAME = 'os';

const String LUA_STRLIBNAME = 'string';

const String LUA_UTF8LIBNAME = 'utf8';

const String LUA_MATHLIBNAME = 'math';

const String LUA_DBLIBNAME = 'debug';

const String LUA_LOADLIBNAME = 'package';

const String LUA_GNAME = '_G';

const int LUA_ERRFILE = 6;

const String LUA_LOADED_TABLE = '_LOADED';

const String LUA_PRELOAD_TABLE = '_PRELOAD';

const int LUAL_NUMSIZES = 136;

const int LUA_NOREF = -2;

const int LUA_REFNIL = -1;

const String LUA_FILEHANDLE = 'FILE*';
